{"version":3,"sources":["components/Navbar.js","components/MultipleChoice.js","components/Flag.js","components/Score.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","Component","MultipleChoice","props","_this","call","state","handleOnChange","bind","assertThisInitialized","handleSubmit","e","setState","target","preventDefault","onGuess","_this2","views","choices","map","choice","countryCode","type","name","onChange","onSubmit","Flag","src","currentFlag","img","alt","Score","_ref","correct","wrong","total","countries","allAnswers","style","maxWidth","display","length","answer","countryName","guessed","defaultProps","App","pastFlags","radioValue","score","handleOnNewGame","nextQuestion","fetch","then","res","json","data","country","alpha3Code","flag","tested","_this3","neverTestedFlags","filter","shuffle","random","Math","floor","countryToTest","toConsumableArray","concat","_loop","countryCodes","includes","rand","push","code","_this4","objectSpread","find","setTimeout","question","rightAnswer","wrongAnswer","_this$state","components_Flag","fontSize","role","aria-label","components_MultipleChoice","components_Score","assign","Fragment","components_Navbar","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34900394.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Navbar extends Component {\n  render() {\n    return (\n        <nav className=\"navbar navbar-expand-sm navbar-light bg-light mb-5 py-5\">\n        <div className=\"container d-flex justify-content-center\">\n            <a className=\"navbar-brand\"><span className=\"display-2 text-light text-center\">Guess The Flag</span></a>\n        </div>\n    </nav>\n    )\n  }\n}\n\nexport default Navbar\n","import React, {Component} from 'react';\n\nexport class MultipleChoice extends Component {\n  constructor (props) {\n    super (props);\n    this.state = {\n      value: '',\n    };\n    this.handleOnChange = this.handleOnChange.bind (this);\n    this.handleSubmit = this.handleSubmit.bind (this);\n  }\n\n  handleOnChange (e) {\n    this.setState ({value: e.target.value});\n  }\n\n  handleSubmit (e) {\n    e.preventDefault ();\n    this.props.onGuess(this.state.value);\n  }\n\n  render () {\n    const {choices} = this.props;\n    let views = choices.map (choice => (\n      <div key={choice.countryCode} className=\"form-check form-check-inline mx-5\">\n        <label className=\"form-check-label\">\n          <input\n            type=\"radio\"\n            className=\"form-check-input\"\n            name=\"choice\"\n            onChange={this.handleOnChange}\n            value={choice.countryCode}\n          />\n          {choice.name}\n        </label>\n      </div>\n    ));\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <fieldset className=\"form-group\">\n          {views}\n          <div className=\"mx-5 my-3 d-flex justify-content-center\">\n            <button type=\"submit\" className=\"btn btn-primary mx-auto\">GUESS</button>\n          </div>\n        </fieldset>\n      </form>\n    );\n  }\n}\n\nexport default MultipleChoice;\n","import React, {Component} from 'react';\n\nexport class Flag extends Component {\n  render () {\n    return (\n      <div className=\"card mt-5 border border-dark w-50\">\n        <img\n          className=\"card-img-top img-fluid\"\n          src={this.props.currentFlag.img}\n          alt={this.props.currentFlag.countryCode}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Flag;\n","import React from 'react';\n\nconst Score = ({correct, wrong, total, countries, allAnswers}) => {\n  return (\n    <div className=\"card text-white bg-dark my-5\" style={{maxWidth: '18rem'}}>\n      <div className=\"card-header text-center\">Score</div>\n      <div className=\"card-body d-flex\">\n        <div className=\"p-3 mr-2\">\n          <h5 className=\"card-title text-success\">Correct</h5>\n          <h4 className=\"card-text text-success text-center\">\n            <i className=\"fas fa-check mr-2\" />{correct}\n          </h4>\n        </div>\n        <div className=\"p-3\">\n          <h5 className=\"card-title text-danger\">Wrong</h5>\n          <h4 className=\"card-text text-danger text-center\">\n            <i className=\"fas fa-times mr-2\" />{wrong}\n          </h4>\n        </div>\n      </div>\n      <div className=\"card-body pt-0 text-center  border-top border-light pt-3\">\n        <p>Answered: {total}</p>\n        <p>Countries: {countries}</p>\n      </div>\n      <div\n        style={{display: allAnswers.length > 0 ? 'block' : 'none'}}\n        className=\"card-body pt-0 text-center  border-top border-light pt-3\"\n      >\n        <p className=\"text-light\">Past guesses:</p>\n        {allAnswers.map (answer => (\n          <p\n            key={answer.countryName}\n            className={answer.guessed ? 'text-success' : 'text-danger'}\n          >\n            <i\n              className={\n                answer.guessed ? 'fas fa-check mr-2' : 'fas fa-times mr-2'\n              }\n            />\n            {' '}\n            {answer.countryName}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nScore.defaultProps = {\n  correct: 0,\n  wrong: 0,\n  total: 0,\n};\n\nexport default Score;\n","import React, {Component} from 'react';\nimport shuffle from 'shuffle-array';\nimport './App.css';\n\nimport Navbar from './components/Navbar';\nimport MultipleChoice from './components/MultipleChoice';\nimport Flag from './components/Flag';\nimport Score from './components/Score';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            countries: [],\n            pastFlags: [],\n            choices: [],\n            currentFlag: {\n                countryCode: '',\n                img: '',\n                countryName: '',\n            },\n            radioValue: '',\n            guessed: 0,\n            score: {\n                correct: 0,\n                wrong: 0,\n                total: 0,\n            },\n            allAnswers: [],\n        };\n        this.handleOnNewGame = this.handleOnNewGame.bind(this);\n        this.nextQuestion = this.nextQuestion.bind(this);\n        this.onGuess = this.onGuess.bind(this);\n    }\n\n    componentDidMount() {\n        const url = `https://restcountries.eu/rest/v2/all`;\n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                const countries = data.map(country => {\n                    return {\n                        countryCode: country.alpha3Code,\n                        name: country.name,\n                        flag: country.flag,\n                        tested: false,\n                    };\n                });\n                this.setState({countries});\n            });\n    }\n\n    handleOnNewGame() {\n        // Clear current state\n        this.setState({\n            pastFlags: [],\n            choices: [],\n            currentFlag: {\n                countryCode: '',\n                img: '',\n                countryName: '',\n            },\n            score: {\n                correct: 0,\n                wrong: 0,\n                total: 0,\n            },\n            allAnswers: [],\n        });\n        // Display a question\n        this.nextQuestion();\n    }\n\n    nextQuestion() {\n        // Create an array of never tested flags\n        let neverTestedFlags = this.state.countries.filter(\n            country => country.tested === false\n        );\n\n        // Shuffle never tested countries array\n        neverTestedFlags = shuffle(neverTestedFlags);\n\n        // Create random number from 0 to never tested array length minus one -> used for selecting a random array element\n        const random = Math.floor(Math.random() * neverTestedFlags.length);\n\n        // Pick 1 random country out of never tested shuffled countries array\n        const countryToTest = neverTestedFlags[random];\n\n        // Set the country within the array as tested and push that tested country to pastFlags attay within state\n        const countries = [...this.state.countries];\n        countries[random].tested = true;\n        this.setState({\n            countries,\n            pastFlags: [...this.state.pastFlags, neverTestedFlags[random]],\n        });\n\n        // Set currentFlag of the state to be the flag img url of the countryToTest\n        this.setState({\n            currentFlag: {\n                countryCode: countryToTest.countryCode,\n                img: countryToTest.flag,\n                countryName: countryToTest.name,\n            },\n        });\n\n        /* Now create 4 choices from all countries regardless if they've been tested of not \n        where at least one country is the one of the currentFlag*/\n\n        // Create an array that will hold 4 country objects including the countryToTest\n        let choices = [countryToTest];\n\n        // Loop through all the countries as long as the length of choices array is less than 4\n        while (choices.length < 4) {\n            // Take a copy of all the countries currently in the state\n            let countries = [...this.state.countries];\n            // Exclude the countryToTest country from the array so that you don't get more than one option for a country\n            const countryCodes = choices.map(country => country.countryCode);\n            countries = countries.filter(\n                country => countryCodes.includes(country.countryCode) === false\n            );\n            // Shuffle the filtered array\n            countries = shuffle(countries);\n            // Create a random number from 0 to countries array length - 1\n            const rand = Math.floor(Math.random() * countries.length);\n            // Use that random number to pick a random country from the array\n            choices.push(countries[rand]);\n        }\n        // Shuffle the array of choices that now should have 4 options, one of them being the currently tested flag\n        choices = shuffle(choices);\n        // Exclude everything but the country names from the choices array\n        choices = choices.map(country => ({\n            countryCode: country.countryCode,\n            name: country.name,\n        }));\n        // Set current state choices array\n        this.setState({choices});\n    }\n\n    onGuess(code) {\n        const score = {...this.state.score};\n        const {correct, wrong, total} = score;\n        const country = [...this.state.countries].find(\n            country =>\n                country.countryCode === this.state.currentFlag.countryCode\n        );\n        const allAnswers = [...this.state.allAnswers];\n        if (this.state.currentFlag.countryCode === code) {\n            // You got it!\n            score.correct = correct + 1;\n            score.total = total + 1;\n            allAnswers.push({\n                guessed: true,\n                countryName: country.name,\n            });\n\n            this.setState({\n                guessed: 2,\n                score,\n                allAnswers,\n            });\n        } else {\n            // Wong answer!\n            score.wrong = wrong + 1;\n            score.total = total + 1;\n            allAnswers.push({\n                guessed: false,\n                countryName: country.name,\n            });\n            this.setState({\n                guessed: 1,\n                score,\n                allAnswers,\n            });\n        }\n        setTimeout(() => {\n            this.setState({guessed: 0});\n            this.nextQuestion();\n        }, 3000);\n    }\n\n    render() {\n        let flag, question, rightAnswer, wrongAnswer, score;\n        const {countries, currentFlag, choices} = this.state;\n\n        if (countries && countries.length > 0 && currentFlag.img) {\n            flag = <Flag currentFlag={this.state.currentFlag} />;\n        } else {\n            flag = (\n                <div className=\"jumbotron m-5\">\n                    <h1 className=\"display-4 text-center\">\n                        Welcome to Guess The Flag Game!\n                    </h1>\n                    <p className=\"lead text-center\">\n                        Click New Game button above to start playing\n                        <p style={{fontSize: '70px'}}>\n                            <span role=\"img\" aria-label=\"Smiling face\">\n                                🙃\n                            </span>\n                        </p>\n                    </p>\n                </div>\n            );\n        }\n\n        if (choices && choices.length > 0) {\n            question = (\n                <MultipleChoice\n                    choices={this.state.choices}\n                    onGuess={this.onGuess}\n                />\n            );\n        }\n        if (this.state.guessed === 2) {\n            rightAnswer = (\n                <div className=\"answer text-success d-flex justify-content-center align-items-center\">\n                    <div>\n                        <i className=\"fas fa-check mr-5\" />\n                        You go it!\n                    </div>\n                </div>\n            );\n        }\n\n        if (this.state.guessed === 1) {\n            wrongAnswer = (\n                <div>\n                    <div className=\"answer text-danger d-flex justify-content-center align-items-center\">\n                        <div>\n                            <i className=\"fas fa-times mr-2\" />\n                            Wrong answer!\n                            <div className=\"correct-country text-dark py-3\">\n                                <p>Correct answer was:</p>\n                                <p>\n                                    <em>\n                                        {this.state.currentFlag.countryName}\n                                    </em>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        if (this.state.pastFlags && this.state.pastFlags.length > 0) {\n            score = (\n                <Score\n                    {...this.state.score}\n                    countries={this.state.countries.length}\n                    allAnswers={this.state.allAnswers}\n                />\n            );\n        }\n\n        return (\n            <>\n                <Navbar />\n                <div className=\"container d-flex justify-content-center align-items-center flex-column\">\n                    {question}\n                    <button\n                        onClick={this.handleOnNewGame}\n                        type=\"button\"\n                        className=\"btn btn-outline-success\"\n                    >\n                        <span className=\"h2\">\n                            New Game\n                            <i className=\"far fa-play-circle ml-2\" />\n                        </span>\n                    </button>\n                    {flag}\n                    {score}\n                </div>\n                {rightAnswer}\n                {wrongAnswer}\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}